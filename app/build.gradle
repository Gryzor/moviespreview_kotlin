apply plugin: 'com.android.application'
//Kotlin android extensions
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
//Kotlin Annotation Processing (KAPT) plugin
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-allopen'

android {
    signingConfigs {
        config_release {
            keyAlias 'movies_preview_alias'
            keyPassword 'juancito311'
            storeFile file('/Users/jpp/Development/Repositories/JppRepos/moviespreview_kotlin/key/movies_preview_key.jks')
            storePassword 'juancito311'
        }
    }
    compileSdkVersion 26
    buildToolsVersion "26.0.2"
    defaultConfig {
        applicationId "com.jpp.moviespreview"
        minSdkVersion 15
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        com.android.ddmlib.DdmPreferences.setTimeOut(60000) // for espresso builds
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField 'String', 'API_ENDPOINT', '"https://api.themoviedb.org/3/"'
            buildConfigField 'String', 'API_KEY', '"eddf6980a6d7dadd72386f55f94ab571"'
            signingConfig signingConfigs.config_release
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField 'String', 'API_ENDPOINT', '"https://api.themoviedb.org/3/"'
            buildConfigField 'String', 'API_KEY', '"eddf6980a6d7dadd72386f55f94ab571"'
        }
    }
    // add common sources for android instrumented tests
    sourceSets.androidTest {
        java.srcDirs += getCommonAndroidTestSources()
    }
    // add common sources for jvm tests
    sourceSets.test {
        java.srcDirs += getCommonAndroidTestSources()
    }
    // disable animations while testing
    testOptions {
        animationsDisabled = true
    }
}

def getCommonAndroidTestSources() {
    def sources = [
            "${rootProject.projectDir}/app/common/test/jvmAndAndroid/src/java"
    ]
    return sources
}

dependencies {
    final espresso_version = '3.0.0'
    final support_version = '26.1.0'
    final anko_version = '0.10.1'
    final daggerVersion = '2.11'
    final constraint_layout_version = '1.0.2'
    final gson_version = '2.8.1'
    final retrofit_version = '2.3.0'
    final room_version = '1.0.0-beta2'
    final mockito_version = '2.10.0'
    final glide_version = '3.8.0'
    compile fileTree(include: ['*.jar'], dir: 'libs')

    // Google libs
    compile "com.android.support:appcompat-v7:$support_version"
    compile "com.android.support.constraint:constraint-layout:$constraint_layout_version"
    compile "com.android.support:recyclerview-v7:$support_version"

    // Kotlin libs
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    // Anko
    compile "org.jetbrains.anko:anko-common:$anko_version"

    // Dagger
    compile "com.google.dagger:dagger:$daggerVersion"
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"

    // Retrofit
    compile "com.google.code.gson:gson:$gson_version"
    compile "com.squareup.retrofit2:retrofit:$retrofit_version"
    compile "com.squareup.retrofit2:converter-gson:$retrofit_version"
    compile 'com.squareup.retrofit2:adapter-rxjava:2.0.2'
    compile 'com.squareup.okhttp3:logging-interceptor:3.6.0'

    // Glide
    compile "com.github.bumptech.glide:glide:$glide_version"

    // Room
    compile "android.arch.persistence.room:runtime:$room_version"
    kapt "android.arch.persistence.room:compiler:$room_version"
    androidTestCompile "com.android.support:support-annotations:$support_version"
    androidTestCompile 'com.android.support.test:runner:1.0.1'
    androidTestCompile "com.android.support.test.espresso:espresso-core:$espresso_version"
    androidTestCompile "com.android.support.test.espresso:espresso-intents:$espresso_version"

    /*
     * Loading views library
     * https://github.com/81813780/AVLoadingIndicatorView
     */
    compile 'com.wang.avi:library:2.1.3'

    /**
     * AccessibilityChecks
     * CountingIdlingResource
     * DrawerActions
     * DrawerMatchers
     * PickerActions (Time and Date picker)
     * RecyclerViewActions
     */
    androidTestCompile("com.android.support.test.espresso:espresso-contrib:$espresso_version") {
        exclude group: 'com.android.support', module: 'appcompat'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'support-v7'
        exclude group: 'com.android.support', module: 'design'
        exclude module: 'support-annotations'
        exclude module: 'recyclerview-v7'
    }
    androidTestCompile "org.mockito:mockito-android:$mockito_version"
    androidTestCompile "org.mockito:mockito-core:$mockito_version"
    kaptAndroidTest "com.google.dagger:dagger-compiler:$daggerVersion"
    testCompile 'junit:junit:4.12'
    testCompile "org.mockito:mockito-core:$mockito_version"
    testCompile "org.mockito:mockito-inline:$mockito_version"
    testCompile "com.nhaarman:mockito-kotlin-kt1.1:1.5.0"

    // to mock final classes only in jvm tests
}

// used to be able to mock not-open classes in kotlin
allOpen {
    annotation("com.jpp.moviespreview.app.util.AllOpen")
}
